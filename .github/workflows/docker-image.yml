name: Auto Build and Push Docker Image to GHCR on Push

on:
  # 当有代码 push 到仓库时自动触发此 workflow
  push:
    branches:
      - main # 或者你的主分支名称，例如 master, develop 等

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 添加 GITHUB_TOKEN 的权限以写入 packages
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
            
      # 登录到 GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ==== 新增步骤：获取当前日期作为版本标签 ====
      - name: Get current date for version tag
        id: date_tag_step
        run: echo "DATE_TAG=$(date +'%y%m%d')" >> "$GITHUB_OUTPUT"
      # ============================================
          
      # 提取元数据，生成镜像标签
      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # 使用上一步获取到的日期标签
            type=raw,value=${{ steps.date_tag_step.outputs.DATE_TAG }}
            # 也可以添加短 SHA 作为额外的标签，确保唯一性 (可选)
            type=sha,format=short
            # 始终使用 latest 标签指向最新的构建
            type=raw,value=latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ github.ref }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.ref }}
          # 将 ENVIRONMENT 构建参数硬编码为 'production'
          build-args: |
            ENVIRONMENT=production
